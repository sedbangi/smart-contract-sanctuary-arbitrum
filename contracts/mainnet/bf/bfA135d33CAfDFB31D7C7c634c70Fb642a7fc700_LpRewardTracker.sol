// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

interface ILpRewardTracker {
    function getDepositTokens() external view returns(address[] memory);
    function proofToken(address _depositToken) external view returns(address);
    function proofForStakeToken(address _proofToken) external view returns(address);
    function depositBalances(address _account, address _depositToken) external view returns (uint256);
    function updateRewards() external;
    function stake(address _depositToken, uint256 _amount) external;
    function stakeForAccount(address _depositToken, address _fundingAccount, address _account, uint256 _amount) external;
    function unstake(address _depositToken, uint256 _amount) external;
    function unstakeForAccount(address _depositToken, address _account, address _receiver, uint256 _amount) external;
    function claim(address _receiver) external returns (uint256);
    function claimForAccount(address _account, address _receiver) external returns (uint256);
    function claimable(address _account) external view returns (uint256);
    function averageStakedAmounts(address _account, address _depositToken) external view returns (uint256);
    function cumulativeRewards(address _account, address _depositToken) external view returns (uint256);
}

// SPDX-License-Identifier: MIT
pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;

interface IPeriphery {
    struct Position {
        uint256 id;                 // position id, generated by counter
        address taker;              // taker address
        address market;             // market address
        int8 direction;             // position direction
        uint16 takerLeverage;       // leverage used by trader
        uint256 amount;             // position amount
        uint256 value;              // position value
        uint256 takerMargin;        // margin of trader
        uint256 makerMargin;        // margin of maker(pool)
        uint256 multiplier;         // multiplier of quanto perpetual contracts
        int256 frLastX96;           // last settled funding global cumulative value
        uint256 stopLossPrice;      // stop loss price of this position set by trader
        uint256 takeProfitPrice;    // take profit price of this position set by trader
        bool useIP;                 // true if the tp/sl is executed by index price
        uint256 lastTPSLTs;         // last timestamp of trading setting the stop loss price or take profit price
        int256 fundingPayment;      // cumulative funding need to pay of this position
        uint256 debtShare;          // borrowed share of interest module
        int256 pnl;                 // cumulative realized pnl of this position
        bool isETH;                 // true if the margin is payed by ETH
        uint256 lastUpdateTs;       // last updated timestamp of this position
    }

    struct PoolInfo {
        uint256 minAddLiquidityAmount;
        uint256 minRemoveLiquidityAmount;
        uint256 reserveRate;
        uint256 removeLiquidityFeeRate;
        int256 balance;
        uint256 sharePrice;
        uint256 assetAmount;
        bool addPaused;
        bool removePaused;
        uint256 totalSupply;
        address baseAsset;
    }

    enum PositionMode{
        Hedge,
        OneWay
    }

    function getSharePrice(address _pool) external view returns (uint256 price);
    function getAllPosition(address _market, address _taker) external view returns (Position[] memory);
    function getPoolInfo(address _pool) external view returns (PoolInfo memory info);
    function getPositionMode(address _market, address _taker) external view returns (PositionMode _mode);
}

// SPDX-License-Identifier: MIT
pragma solidity 0.6.12;

interface IPriceFeeds {
    function getPrice(address _token) external view returns (uint256);
}

// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

interface IRewardDistributor {
    function rewardToken() external view returns (address);
    function tokensPerInterval() external view returns (uint256);
    function pendingRewards(uint256 supply) external view returns (uint256);
    function distribute(uint256 supply) external returns (uint256);
}

// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

contract Governable {
    address public gov;

    constructor() public {
        gov = msg.sender;
    }

    modifier onlyGov() {
        require(msg.sender == gov, "Governable: forbidden");
        _;
    }

    function setGov(address _gov) external onlyGov {
        gov = _gov;
    }
}

// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// SPDX-License-Identifier: MIT
pragma solidity 0.6.12;

import "./IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

import "./IERC20.sol";
import "../math/SafeMath.sol";
import "../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

// SPDX-License-Identifier: MIT

pragma solidity ^0.6.2;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.3._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.3._
     */
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () internal {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;

import "./libraries/math/SafeMath.sol";
import "./libraries/token/IERC20Metadata.sol";
import "./libraries/token/SafeERC20.sol";
import "./libraries/utils/ReentrancyGuard.sol";

import "./interfaces/IRewardDistributor.sol";
import "./libraries/access/Governable.sol";
import "./interfaces/ILpRewardTracker.sol";
import "./interfaces/IPeriphery.sol";
import "./interfaces/IPriceFeeds.sol";
import "./tokens/interfaces/IMintable.sol";


contract LpRewardTracker is ReentrancyGuard, ILpRewardTracker, Governable {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    uint256 public constant PRECISION = 1e20;           // rewards precision
    uint256 public constant PRICE_PRECISION = 1e20;     // price precision
    uint256 public constant SHARE_PRECISION = 1e10;     // share price precision

    address[] public depositTokens;                     // list of allow stake token (different lp tokens form different pools)
    mapping (address => bool) public isDepositToken;    // token => is allowed to stake
    mapping (address => address) public override proofToken;     // stake token => proof token
    mapping (address => address) public override proofForStakeToken; // proof token => stake token
    mapping (address => address) public poolAddress;    // stake token =>  pool address where the stake token comes from
    mapping (address => mapping (address => uint256)) public override depositBalances;  // user => lp token => staked amount
    mapping (address => uint256) public totalDepositSupply; // lp token => total user staked amount

    uint256 public totalSupply;           // meaningless, only distribute reward

    mapping (address => uint256) public cumulativeRewardPerToken;    // lp token => cumulative reward per token

    mapping (address => mapping (address => uint256)) public claimableReward;                   // user => lp token => claimable reward
    mapping (address => mapping (address => uint256)) public previousCumulatedRewardPerToken;   // user => lp token => previous cumulative reward per token
    mapping (address => mapping (address => uint256)) public override cumulativeRewards;        // user => lp token => cumulative reward, used for vesting
    mapping (address => mapping (address => uint256)) public override averageStakedAmounts;     // user => lp token =>  average staked amounts, used for vest

    address public distributor;             // rewards distributor address
    bool public isInitialized;

    address public priceFeed;               // price feed address
    address public periphery;               // trade periphery

    bool public inPrivateStakingMode;
    bool public inPrivateClaimingMode;

    mapping (address => bool) public isHandler;  // operator whitelist

    event Claimed(address receiver, uint256 amount);
    event SetDepositToken(address depositToken, address poolAddress, address proofToken, bool isDepositToken);
    event SetInPrivateStakingMode(bool inPrivateStakingMode);
    event SetInPrivateClaimingMode(bool inPrivateClaimingMode);
    event SetPriceFeed(address priceFeed);
    event SetHandler(address handler, bool isActive);

    constructor() public {}

    /// @notice get deposit token list
    function getDepositTokens() public view override returns(address[] memory) {
        uint256 len = depositTokens.length;
        address[] memory _depositTokens = new address[](len);
        for (uint256 i=0; i<len; i++) {
            _depositTokens[i] = depositTokens[i];
        }
        return _depositTokens;
    }

    function initialize(
        address _distributor,
        address _priceFeed,
        address _periphery
    ) external onlyGov {
        require(!isInitialized, "LpRewardTracker: already initialized");
        isInitialized = true;

        distributor = _distributor;
        priceFeed = _priceFeed;
        periphery = _periphery;
    }

    /// @notice enable or disable deposit token
    /// @param _depositToken, deposit token (lp token address)
    /// @param _poolAddress, pool address, where this lp token comes from
    /// @param _proofToken, proof token address
    /// @param _isDepositToken, {true: enable , false: disable}
    function setDepositToken(
        address _depositToken,
        address _poolAddress,
        address _proofToken,
        bool _isDepositToken
    ) external onlyGov {
        if (isDepositToken[_depositToken] == _isDepositToken) return;

        if (isDepositToken[_depositToken] == true){
            uint256 len = depositTokens.length;
            for (uint256 i=0; i < len; i++) {
                if (depositTokens[i] == _depositToken) {
                    depositTokens[i] = depositTokens[len-1];
                    depositTokens.pop();
                    isDepositToken[_depositToken] = false;
                    poolAddress[_depositToken] = address(0);
                    proofForStakeToken[_proofToken] = address(0);
                    break;
                }
            }
        } else {
            isDepositToken[_depositToken] = _isDepositToken;
            depositTokens.push(_depositToken);
            proofToken[_depositToken] = _proofToken;
            poolAddress[_depositToken] = _poolAddress;
            proofForStakeToken[_proofToken] = _depositToken;
        }

        emit SetDepositToken(_depositToken, _poolAddress, _proofToken, _isDepositToken);
    }

    function setInPrivateStakingMode(bool _inPrivateStakingMode) external onlyGov {
        inPrivateStakingMode = _inPrivateStakingMode;
        emit SetInPrivateStakingMode(_inPrivateStakingMode);
    }

    function setInPrivateClaimingMode(bool _inPrivateClaimingMode) external onlyGov {
        inPrivateClaimingMode = _inPrivateClaimingMode;
        emit SetInPrivateClaimingMode(_inPrivateClaimingMode);
    }

    function setPriceFeed(address _priceFeed) external onlyGov {
        require(_priceFeed != address(0), "LpRewardTracker: invalid price feed address");
        priceFeed = _priceFeed;
        emit SetPriceFeed(_priceFeed);
    }

    function setHandler(address _handler, bool _isActive) external onlyGov {
        isHandler[_handler] = _isActive;
        emit SetHandler(_handler, _isActive);
    }

    function withdrawToken(address _token, address _account, uint256 _amount) external onlyGov {
        IERC20(_token).safeTransfer(_account, _amount);
    }

    /// @notice stake a lp token for reward
    /// @param _depositToken, lp token address
    /// @param _amount, amount to be staked
    function stake(address _depositToken, uint256 _amount) external override nonReentrant {
        if (inPrivateStakingMode) { revert("LpRewardTracker: action not enabled"); }
        _stake(_depositToken, msg.sender, msg.sender, _amount);
    }

    /// @notice stake a lp token for reward for another account
    /// @param _depositToken, lp token address
    /// @param _fundingAccount, deposit token from which address
    /// @param _account,  deposit for which address
    /// @param _amount, amount
    function stakeForAccount(address _depositToken, address _fundingAccount, address _account, uint256 _amount) external override nonReentrant {
        _validateHandler();
        _stake( _depositToken, _fundingAccount, _account, _amount);
    }

    /// @notice unstake
    /// @param _depositToken, lp token address
    /// @param _amount, amount
    function unstake(address _depositToken, uint256 _amount) external override nonReentrant {
        if (inPrivateStakingMode) { revert("LpRewardTracker: action not enabled"); }
        _unstake(_depositToken, msg.sender, _amount, msg.sender);
    }

    /// @notice unstake for another account
    /// @param _depositToken, lp token address
    /// @param _account,  deposit for which address
    /// @param _amount, amount
    function unstakeForAccount(address _depositToken, address _account, address _receiver, uint256 _amount) external override nonReentrant {
        _validateHandler();
        _unstake(_depositToken, _account, _amount, _receiver);
    }

    /// @notice get reward speed from the distributor
    function tokensPerInterval() external view returns (uint256) {
        return IRewardDistributor(distributor).tokensPerInterval();
    }

    /// @notice update reward information
    function updateRewards() external override nonReentrant {
        _updateRewards(address(0));
    }

    /// @notice claim reward
    /// @param _receiver, receiver address
    function claim(address _receiver) external override nonReentrant returns (uint256) {
        if (inPrivateClaimingMode) { revert("LpRewardTracker: action not enabled"); }
        return _claim(msg.sender, _receiver);
    }

    /// @notice claim reward for another account
    /// @param _receiver, receiver address
    function claimForAccount(address _account, address _receiver) external override nonReentrant returns (uint256) {
        _validateHandler();
        return _claim(_account, _receiver);
    }

    struct ClaimTmp {
        address depositToken;
        uint256 blockReward;
        uint256 len;
        uint256 totalStakeValue;
        uint256 price;
        uint256 sharePrice;
        uint256 totalDeposit;
        uint256 stakeReward;
    }

    /// @notice estimate total reward earned by an account
    /// @param _account, account address
    function claimable(address _account) public override view returns (uint256 claimableAmount) {
        if (_account == address(0)) return 0;
        ClaimTmp memory tmp;
        tmp.blockReward = IRewardDistributor(distributor).pendingRewards(totalSupply);
        tmp.len = depositTokens.length;
        tmp.totalStakeValue;
        uint256[] memory stakeValues = new uint256[](tmp.len);
        for (uint256 i=0; i< tmp.len; i++) {
            tmp.depositToken = depositTokens[i];
            claimableAmount = claimableAmount.add(claimableReward[_account][tmp.depositToken]);
            tmp.totalDeposit = totalDepositSupply[tmp.depositToken];
            if (tmp.totalDeposit == 0) continue;

            tmp.sharePrice = IPeriphery(periphery).getSharePrice(poolAddress[tmp.depositToken]);
            tmp.price = IPriceFeeds(priceFeed).getPrice(poolAddress[tmp.depositToken]);
            stakeValues[i] = tmp.sharePrice.mul(tmp.totalDeposit).div(
                SHARE_PRECISION).mul(tmp.price).div(PRICE_PRECISION);

            tmp.totalStakeValue = tmp.totalStakeValue.add(stakeValues[i]);

            claimableAmount = claimableAmount.add(
                cumulativeRewardPerToken[tmp.depositToken].sub(
                    previousCumulatedRewardPerToken[_account][tmp.depositToken]
                ).mul(
                    depositBalances[_account][tmp.depositToken]
                ).div(PRECISION)
            );
        }

        if (tmp.totalStakeValue == 0 || tmp.blockReward == 0) return claimableAmount;

        for (uint256 i=0; i< tmp.len; i++) {
            tmp.depositToken = depositTokens[i];
            if (totalDepositSupply[tmp.depositToken] == 0 || depositBalances[_account][tmp.depositToken] == 0) continue;

            claimableAmount = claimableAmount.add(
                tmp.blockReward.mul(stakeValues[i]).mul(PRECISION).div(tmp.totalStakeValue).mul(
                    depositBalances[_account][tmp.depositToken]).div(totalDepositSupply[tmp.depositToken]
                ).div(PRECISION)
            );
        }
        return claimableAmount;
    }

    /// @notice get reward token address
    function rewardToken() public view returns (address) {
        return IRewardDistributor(distributor).rewardToken();
    }

    function _claim(address _account, address _receiver) private returns (uint256 claimableAmount) {
        _updateRewards(_account);

        uint256 len = depositTokens.length;
        for (uint256 i=0; i< len; i++) {
            address depositToken = depositTokens[i];
            claimableAmount = claimableAmount.add(claimableReward[_account][depositToken]);
            claimableReward[_account][depositToken] = 0;
        }

        if (claimableAmount > 0) {
            IERC20(rewardToken()).safeTransfer(_receiver, claimableAmount);
            emit Claimed(_account, claimableAmount);
        }

        return claimableAmount;
    }

    function _validateHandler() private view {
        require(isHandler[msg.sender], "LpRewardTracker: forbidden");
    }

    function _stake(address _depositToken, address _fundingAccount, address _account, uint256 _amount) private {
        require(_amount > 0, "LpRewardTracker: invalid amount");
        require(isDepositToken[_depositToken], "LpRewardTracker: invalid deposit token");

        IERC20(_depositToken).safeTransferFrom(_fundingAccount, address(this), _amount);

        _updateRewards(_account);

        depositBalances[_account][_depositToken] = depositBalances[_account][_depositToken].add(_amount);
        totalDepositSupply[_depositToken] = totalDepositSupply[_depositToken].add(_amount);

        IMintable(proofToken[_depositToken]).mint(_account, _amount);
        
        totalSupply = totalSupply.add(_amount);    
    }

    function _unstake(address _depositToken, address _account, uint256 _amount, address _receiver) private {
        require(_amount > 0, "LpRewardTracker: invalid amount");

        uint256 depositBalance = depositBalances[_account][_depositToken];
        require(depositBalance >= _amount, "LpRewardTracker: amount exceeds depositBalance");
        _updateRewards(_account);

        depositBalances[_account][_depositToken] = depositBalance.sub(_amount);
        totalDepositSupply[_depositToken] = totalDepositSupply[_depositToken].sub(_amount);

        IMintable(proofToken[_depositToken]).burn(_account, _amount);
        totalSupply = totalSupply.sub(_amount);
        IERC20(_depositToken).safeTransfer(_receiver, _amount);
    }

    function _updateRewards(address _account) private {
        uint256 blockReward = IRewardDistributor(distributor).distribute(totalSupply);
        uint256 len = depositTokens.length;
        uint256 totalDepositValue = 0;
        uint256[] memory depositValue = new uint256[](len);
        for (uint256 i=0; i< len; i++) {
            address depositToken = depositTokens[i];
            uint256 totalDeposit = totalDepositSupply[depositToken];
            if (totalDeposit == 0) continue;

            uint256 sharePrice = IPeriphery(periphery).getSharePrice(poolAddress[depositToken]);
            uint256 price = IPriceFeeds(priceFeed).getPrice(poolAddress[depositToken]);

            depositValue[i] = sharePrice.mul(totalDeposit).div(
                SHARE_PRECISION).mul(price).div(PRICE_PRECISION);

            totalDepositValue = totalDepositValue.add(depositValue[i]);
        }

        if(totalDepositValue > 0) {
            for (uint256 i = 0; i < len; i++) {
                address depositToken = depositTokens[i];
                _updateRewardsForDepositToken(_account, depositToken, blockReward, depositValue[i], totalDepositValue);
            }
        }
    }

    struct StatusTmp {
        uint256 supply;
        uint256 rewardIntervalOfDepositToken;
        uint256 cumulativeRewardPerToken;
        uint256 accountReward;
        uint256 nextCumulativeReward;

    }
    function _updateRewardsForDepositToken(
        address _account, 
        address _depositToken, 
        uint256 _blockReward,
        uint256 _totalValueOfDepositToken,
        uint256 _totalValue
    ) private {
        StatusTmp memory tmp;
        tmp.supply = totalDepositSupply[_depositToken];

        if (tmp.supply == 0 || _totalValueOfDepositToken == 0){
            previousCumulatedRewardPerToken[_account][_depositToken] = cumulativeRewardPerToken[_depositToken];
            return;
        }
        tmp.rewardIntervalOfDepositToken = _blockReward.mul(PRECISION).mul(_totalValueOfDepositToken).div(_totalValue);

        tmp.cumulativeRewardPerToken = cumulativeRewardPerToken[_depositToken];

        if (tmp.rewardIntervalOfDepositToken > 0) {
            tmp.cumulativeRewardPerToken = cumulativeRewardPerToken[_depositToken].add(
                tmp.rewardIntervalOfDepositToken.div(tmp.supply)
            );
            cumulativeRewardPerToken[_depositToken] = tmp.cumulativeRewardPerToken;        
        }

        if (tmp.cumulativeRewardPerToken == 0) return;

        if (_account != address(0)) {
            uint256 depositAmount = depositBalances[_account][_depositToken];
            tmp.accountReward = tmp.cumulativeRewardPerToken.sub(
                previousCumulatedRewardPerToken[_account][_depositToken]
            ).mul(
                depositAmount
            ).div(PRECISION);

            claimableReward[_account][_depositToken] = claimableReward[_account][_depositToken].add(tmp.accountReward);

            previousCumulatedRewardPerToken[_account][_depositToken] = tmp.cumulativeRewardPerToken;

            if (tmp.accountReward > 0) {
                tmp.nextCumulativeReward = cumulativeRewards[_account][_depositToken].add(tmp.accountReward);
                
                averageStakedAmounts[_account][_depositToken] = averageStakedAmounts[_account][_depositToken].mul(
                    cumulativeRewards[_account][_depositToken]).div(tmp.nextCumulativeReward
                ).add(
                    depositAmount.mul(tmp.accountReward).div(tmp.nextCumulativeReward)
                );
                cumulativeRewards[_account][_depositToken] = tmp.nextCumulativeReward;
            }
        }
    }
}

// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

interface IMintable {
    function isMinter(address _account) external returns (bool);
    function setMinter(address _minter, bool _isActive) external;
    function mint(address _account, uint256 _amount) external;
    function burn(address _account, uint256 _amount) external;
}